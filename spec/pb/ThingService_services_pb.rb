# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: ThingService.proto for package 'gruf.demo'
# Original file comments:
# Copyright (c) 2020-present, BigCommerce Pty. Ltd. All rights reserved
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

require 'grpc'
require 'ThingService_pb'

module Gruf
  module Demo
    module ThingService
      # Demonstration service
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'gruf.demo.ThingService'

        # Request calls
        # For testing a request/response call
        rpc :GetThing, ::Gruf::Demo::GetThingRequest, ::Gruf::Demo::GetThingResponse
        # For testing a server streaming call
        rpc :GetThings, ::Gruf::Demo::GetThingsRequest, stream(::Gruf::Demo::Thing)
        # For testing a client streaming call
        rpc :CreateThings, stream(::Gruf::Demo::Thing), ::Gruf::Demo::CreateThingsResponse
        # For testing a bidirectional streaming call
        rpc :CreateThingsInStream, stream(::Gruf::Demo::Thing), stream(::Gruf::Demo::Thing)
      end

      Stub = Service.rpc_stub_class
    end
  end
end
